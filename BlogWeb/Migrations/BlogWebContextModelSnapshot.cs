// <auto-generated />
using System;
using BlogWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogWeb.Migrations
{
    [DbContext(typeof(BlogWebContext))]
    partial class BlogWebContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlogWeb.Models.AdminAccount", b =>
                {
                    b.Property<int>("AdminAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminAccountId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("AdminAccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("BlogWeb.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"), 1L, 1);

                    b.Property<string>("CatName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("CatId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BlogWeb.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<bool?>("hidden")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BlogWeb.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"), 1L, 1);

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("BlogWeb.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<int?>("AdminAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CatId")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<string>("Thumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("AdminAccountId");

                    b.HasIndex("CatId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BlogWeb.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BlogWeb.Models.UserAccount", b =>
                {
                    b.Property<int>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAccountId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserAccountId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("BlogWeb.Models.AdminAccount", b =>
                {
                    b.HasOne("BlogWeb.Models.Role", "Role")
                        .WithMany("AdminAccounts")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BlogWeb.Models.Category", b =>
                {
                    b.HasOne("BlogWeb.Models.Category", "ParentCategory")
                        .WithMany("CategoryChildren")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BlogWeb.Models.Comment", b =>
                {
                    b.HasOne("BlogWeb.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("BlogWeb.Models.UserAccount", "UserAccount")
                        .WithMany("Comments")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Post");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BlogWeb.Models.Favorite", b =>
                {
                    b.HasOne("BlogWeb.Models.Post", "Post")
                        .WithMany("Favorites")
                        .HasForeignKey("PostId");

                    b.HasOne("BlogWeb.Models.UserAccount", "UserAccount")
                        .WithMany("Favorites")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Post");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BlogWeb.Models.Post", b =>
                {
                    b.HasOne("BlogWeb.Models.AdminAccount", "AdminAccount")
                        .WithMany("Posts")
                        .HasForeignKey("AdminAccountId");

                    b.HasOne("BlogWeb.Models.Category", "Cat")
                        .WithMany("Posts")
                        .HasForeignKey("CatId");

                    b.Navigation("AdminAccount");

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("BlogWeb.Models.AdminAccount", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogWeb.Models.Category", b =>
                {
                    b.Navigation("CategoryChildren");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogWeb.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("BlogWeb.Models.Role", b =>
                {
                    b.Navigation("AdminAccounts");
                });

            modelBuilder.Entity("BlogWeb.Models.UserAccount", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
